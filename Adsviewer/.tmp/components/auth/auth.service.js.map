{"version":3,"sources":["../../../client/components/auth/auth.service.js"],"names":["AuthService","$location","$http","$cookies","$q","appConfig","Util","User","safeCb","currentUser","userRoles","get","path","Auth","login","callback","email","password","post","then","put","res","data","token","$promise","user","catch","logout","err","reject","remove","createUser","save","changePassword","oldPassword","newPassword","id","_id","getCurrentUser","arguments","length","value","hasOwnProperty","when","isLoggedIn","is","hasRole","role","r","h","indexOf","has","isAdmin","apply","concat","getToken","angular","module","factory"],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n  function AuthService($location, $http, $cookies, $q, appConfig, Util, User) {\n    var safeCb = Util.safeCb;\n    var currentUser = {};\n    var userRoles = appConfig.userRoles || [];\n\n    if ($cookies.get('token') && $location.path() !== '/logout') {\n      currentUser = User.get();\n    }\n\n    var Auth = {\n\n      /**\n       * Authenticate user and save token\n       *\n       * @param  {Object}   user     - login info\n       * @param  {Function} callback - optional, function(error, user)\n       * @return {Promise}\n       */\n      login({\n        email,\n        password\n      }, callback) {\n        return $http.post('/auth/local', {\n            email: email,\n            password: password\n          })\n          .then(res => {\n            $cookies.put('token', res.data.token);\n            currentUser = User.get();\n            return currentUser.$promise;\n          })\n          .then(user => {\n            safeCb(callback)(null, user);\n            return user;\n          })\n          .catch(err => {\n            Auth.logout();\n            safeCb(callback)(err.data);\n            return $q.reject(err.data);\n          });\n      },\n\n      /**\n       * Delete access token and user info\n       */\n      logout() {\n        $cookies.remove('token');\n        currentUser = {};\n      },\n\n      /**\n       * Create a new user\n       *\n       * @param  {Object}   user     - user info\n       * @param  {Function} callback - optional, function(error, user)\n       * @return {Promise}\n       */\n      createUser(user, callback) {\n        return User.save(user, function(data) {\n            $cookies.put('token', data.token);\n            currentUser = User.get();\n            return safeCb(callback)(null, user);\n          }, function(err) {\n            Auth.logout();\n            return safeCb(callback)(err);\n          })\n          .$promise;\n      },\n\n      /**\n       * Change password\n       *\n       * @param  {String}   oldPassword\n       * @param  {String}   newPassword\n       * @param  {Function} callback    - optional, function(error, user)\n       * @return {Promise}\n       */\n      changePassword(oldPassword, newPassword, callback) {\n        return User.changePassword({\n            id: currentUser._id\n          }, {\n            oldPassword: oldPassword,\n            newPassword: newPassword\n          }, function() {\n            return safeCb(callback)(null);\n          }, function(err) {\n            return safeCb(callback)(err);\n          })\n          .$promise;\n      },\n\n      /**\n       * Gets all available info on a user\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, funciton(user)\n       * @return {Object|Promise}\n       */\n      getCurrentUser(callback) {\n        if (arguments.length === 0) {\n          return currentUser;\n        }\n\n        var value = currentUser.hasOwnProperty('$promise') ? currentUser.$promise : currentUser;\n        return $q.when(value)\n          .then(user => {\n            safeCb(callback)(user);\n            return user;\n          }, () => {\n            safeCb(callback)({});\n            return {};\n          });\n      },\n\n      /**\n       * Check if a user is logged in\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, function(is)\n       * @return {Bool|Promise}\n       */\n      isLoggedIn(callback) {\n        if (arguments.length === 0) {\n          return currentUser.hasOwnProperty('role');\n        }\n\n        return Auth.getCurrentUser(null)\n          .then(user => {\n            var is = user.hasOwnProperty('role');\n            safeCb(callback)(is);\n            return is;\n          });\n      },\n\n      /**\n       * Check if a user has a specified role or higher\n       *   (synchronous|asynchronous)\n       *\n       * @param  {String}     role     - the role to check against\n       * @param  {Function|*} callback - optional, function(has)\n       * @return {Bool|Promise}\n       */\n      hasRole(role, callback) {\n        var hasRole = function(r, h) {\n          return userRoles.indexOf(r) >= userRoles.indexOf(h);\n        };\n\n        if (arguments.length < 2) {\n          return hasRole(currentUser.role, role);\n        }\n\n        return Auth.getCurrentUser(null)\n          .then(user => {\n            var has = user.hasOwnProperty('role') ? hasRole(user.role, role) : false;\n            safeCb(callback)(has);\n            return has;\n          });\n      },\n\n      /**\n       * Check if a user is an admin\n       *   (synchronous|asynchronous)\n       *\n       * @param  {Function|*} callback - optional, function(is)\n       * @return {Bool|Promise}\n       */\n      isAdmin() {\n        return Auth.hasRole.apply(Auth, [].concat.apply(['admin'], arguments));\n      },\n\n      /**\n       * Get auth token\n       *\n       * @return {String} - a token string used for authenticating\n       */\n      getToken() {\n        return $cookies.get('token');\n      }\n    };\n\n    return Auth;\n  }\n\n  angular.module('adsviewerApp.auth')\n    .factory('Auth', AuthService);\n})();\n"]}