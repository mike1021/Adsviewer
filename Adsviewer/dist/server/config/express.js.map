{"version":3,"sources":["../../../server/config/express.js"],"names":["express","require","favicon","morgan","compression","bodyParser","methodOverride","cookieParser","errorHandler","path","lusca","config","passport","session","connectMongo","mongoose","MongoStore","module","exports","app","env","get","use","static","join","root","set","engine","renderFile","urlencoded","extended","json","initialize","secret","secrets","saveUninitialized","resave","store","mongooseConnection","connection","db","process","SAUCE_USERNAME","csrf","angular","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection","ignore"],"mappings":"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","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nvar express = require('express');\nvar favicon = require('serve-favicon');\nvar morgan  = require('morgan');\nvar compression  = require('compression');\nvar bodyParser  = require('body-parser');\nvar methodOverride  = require('method-override');\nvar cookieParser  = require('cookie-parser');\nvar errorHandler  = require('errorhandler');\nvar path  = require('path');\nvar lusca  = require('lusca');\nvar config  = require('./environment');\nvar passport  = require('passport');\nvar session  = require('express-session');\nvar connectMongo  = require('connect-mongo');\nvar mongoose  = require('mongoose');\nvar MongoStore = connectMongo(session);\n\nmodule.exports = function(app) {\n  var env = app.get('env');\n\n  if (env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if (env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      db: 'adsviewer'\n    })\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if (env !== 'test' && !process.env.SAUCE_USERNAME) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  if ('development' === env) {\n    app.use(require('connect-livereload')({\n      ignore: [\n        /^\\/api\\/(.*)/,\n        /\\.js(\\?.*)?$/, /\\.css(\\?.*)?$/, /\\.svg(\\?.*)?$/, /\\.ico(\\?.*)?$/, /\\.woff(\\?.*)?$/,\n        /\\.png(\\?.*)?$/, /\\.jpg(\\?.*)?$/, /\\.jpeg(\\?.*)?$/, /\\.gif(\\?.*)?$/, /\\.pdf(\\?.*)?$/\n      ]\n    }));\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}