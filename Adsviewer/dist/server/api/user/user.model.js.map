{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":["Promise","require","UserSchema","name","String","email","type","lowercase","required","role","default","password","provider","salt","virtual","get","_id","path","validate","length","value","respond","self","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;AACA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAGA,IAAIC,aAAa,qBAAW;AAC1BC,QAAMC,MADoB;AAE1BC,SAAO;AACLC,UAAMF,MADD;AAELG,eAAW,IAFN;AAGLC,cAAU;AAHL,GAFmB;AAO1BC,QAAM;AACJH,UAAMF,MADF;AAEJM,aAAS;AAFL,GAPoB;AAW1BC,YAAU;AACRL,UAAMF,MADE;AAERI,cAAU;AAFF,GAXgB;AAe1BI,YAAUR,MAfgB;AAgB1BS,QAAMT;AAhBoB,CAAX,CAAjB;;AAmBA;;;;AAIA;AACAF,WACGY,OADH,CACW,SADX,EAEGC,GAFH,CAEO,YAAW;AACd,SAAO;AACL,YAAQ,KAAKZ,IADR;AAEL,YAAQ,KAAKM;AAFR,GAAP;AAID,CAPH;;AASA;AACAP,WACGY,OADH,CACW,OADX,EAEGC,GAFH,CAEO,YAAW;AACd,SAAO;AACL,WAAO,KAAKC,GADP;AAEL,YAAQ,KAAKP;AAFR,GAAP;AAID,CAPH;;AASA;;;;AAIA;AACAP,WACGe,IADH,CACQ,OADR,EAEGC,QAFH,CAEY,UAASb,KAAT,EAAgB;AACxB,SAAOA,MAAMc,MAAb;AACD,CAJH,EAIK,uBAJL;;AAMA;AACAjB,WACGe,IADH,CACQ,UADR,EAEGC,QAFH,CAEY,UAASP,QAAT,EAAmB;AAC3B,SAAOA,SAASQ,MAAhB;AACD,CAJH,EAIK,0BAJL;;AAMA;AACAjB,WACGe,IADH,CACQ,OADR,EAEGC,QAFH,CAEY,UAASE,KAAT,EAAgBC,OAAhB,EAAyB;AACjC,MAAIC,OAAO,IAAX;;AAEA,SAAO,KAAKC,WAAL,CAAiBC,OAAjB,CAAyB,EAAEnB,OAAOe,KAAT,EAAzB,EAA2CK,IAA3C,GACJC,IADI,CACC,UAASC,IAAT,EAAe;AACnB,QAAIA,IAAJ,EAAU;AACR,UAAIL,KAAKM,EAAL,KAAYD,KAAKC,EAArB,EAAyB;AACvB,eAAOP,QAAQ,IAAR,CAAP;AACD;AACD,aAAOA,QAAQ,KAAR,CAAP;AACD;AACD,WAAOA,QAAQ,IAAR,CAAP;AACD,GATI,EAUJQ,KAVI,CAUE,UAASC,GAAT,EAAc;AACnB,UAAMA,GAAN;AACD,GAZI,CAAP;AAaD,CAlBH,EAkBK,gDAlBL;;AAoBA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAASX,KAAT,EAAgB;AACvC,SAAOA,SAASA,MAAMD,MAAtB;AACD,CAFD;;AAIA;;;AAGAjB,WACG8B,GADH,CACO,MADP,EACe,UAASC,IAAT,EAAe;AAAA;;AAC1B;AACA,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOD,MAAP;AACD;;AAED,MAAI,CAACF,mBAAmB,KAAKpB,QAAxB,CAAL,EAAwC;AACtC,WAAOsB,KAAK,IAAIE,KAAJ,CAAU,kBAAV,CAAL,CAAP;AACD;;AAED;AACA,OAAKC,QAAL,CAAc,UAACC,OAAD,EAAUxB,IAAV,EAAmB;AAC/B,QAAIwB,OAAJ,EAAa;AACX,aAAOJ,KAAKI,OAAL,CAAP;AACD;AACD,UAAKxB,IAAL,GAAYA,IAAZ;AACA,UAAKyB,eAAL,CAAqB,MAAK3B,QAA1B,EAAoC,UAAC4B,UAAD,EAAaC,cAAb,EAAgC;AAClE,UAAID,UAAJ,EAAgB;AACd,eAAON,KAAKM,UAAL,CAAP;AACD;AACD,YAAK5B,QAAL,GAAgB6B,cAAhB;AACAP;AACD,KAND;AAOD,GAZD;AAaD,CAzBH;;AA2BA;;;AAGA/B,WAAWuC,OAAX,GAAqB;AACnB;;;;;;;;AAQAC,cATmB,wBASN/B,QATM,EASIgC,QATJ,EASc;AAAA;;AAC/B,QAAI,CAACA,QAAL,EAAe;AACb,aAAO,KAAKhC,QAAL,KAAkB,KAAK2B,eAAL,CAAqB3B,QAArB,CAAzB;AACD;;AAED,SAAK2B,eAAL,CAAqB3B,QAArB,EAA+B,UAACmB,GAAD,EAAMc,MAAN,EAAiB;AAC9C,UAAId,GAAJ,EAAS;AACP,eAAOa,SAASb,GAAT,CAAP;AACD;;AAED,UAAI,OAAKnB,QAAL,KAAkBiC,MAAtB,EAA8B;AAC5BD,iBAAS,IAAT,EAAe,IAAf;AACD,OAFD,MAEO;AACLA,iBAAS,IAAT,EAAe,KAAf;AACD;AACF,KAVD;AAWD,GAzBkB;;;AA2BnB;;;;;;;;AAQAP,UAnCmB,oBAmCVS,QAnCU,EAmCAF,QAnCA,EAmCU;AAC3B,QAAIG,kBAAkB,EAAtB;;AAEA,QAAI,OAAOC,UAAU,CAAV,CAAP,KAAwB,UAA5B,EAAwC;AACtCJ,iBAAWI,UAAU,CAAV,CAAX;AACAF,iBAAWC,eAAX;AACD,KAHD,MAGO,IAAI,OAAOC,UAAU,CAAV,CAAP,KAAwB,UAA5B,EAAwC;AAC7CJ,iBAAWI,UAAU,CAAV,CAAX;AACD;;AAED,QAAI,CAACF,QAAL,EAAe;AACbA,iBAAWC,eAAX;AACD;;AAED,QAAI,CAACH,QAAL,EAAe;AACb,aAAO,iBAAOK,WAAP,CAAmBH,QAAnB,EAA6BI,QAA7B,CAAsC,QAAtC,CAAP;AACD;;AAED,WAAO,iBAAOD,WAAP,CAAmBH,QAAnB,EAA6B,UAACf,GAAD,EAAMjB,IAAN,EAAe;AACjD,UAAIiB,GAAJ,EAAS;AACPa,iBAASb,GAAT;AACD,OAFD,MAEO;AACLa,iBAAS,IAAT,EAAe9B,KAAKoC,QAAL,CAAc,QAAd,CAAf;AACD;AACF,KANM,CAAP;AAOD,GA5DkB;;;AA8DnB;;;;;;;;AAQAX,iBAtEmB,2BAsEH3B,QAtEG,EAsEOgC,QAtEP,EAsEiB;AAClC,QAAI,CAAChC,QAAD,IAAa,CAAC,KAAKE,IAAvB,EAA6B;AAC3B,UAAI,CAAC8B,QAAL,EAAe;AACb,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOA,SAAS,0BAAT,CAAP;AACD;AACF;;AAED,QAAIO,oBAAoB,KAAxB;AACA,QAAIC,mBAAmB,EAAvB;AACA,QAAItC,OAAO,IAAIuC,MAAJ,CAAW,KAAKvC,IAAhB,EAAsB,QAAtB,CAAX;;AAEA,QAAI,CAAC8B,QAAL,EAAe;AACb,aAAO,iBAAOU,UAAP,CAAkB1C,QAAlB,EAA4BE,IAA5B,EAAkCqC,iBAAlC,EAAqDC,gBAArD,EACOF,QADP,CACgB,QADhB,CAAP;AAED;;AAED,WAAO,iBAAOK,MAAP,CAAc3C,QAAd,EAAwBE,IAAxB,EAA8BqC,iBAA9B,EAAiDC,gBAAjD,EAAmE,UAACrB,GAAD,EAAMyB,GAAN,EAAc;AACtF,UAAIzB,GAAJ,EAAS;AACPa,iBAASb,GAAT;AACD,OAFD,MAEO;AACLa,iBAAS,IAAT,EAAeY,IAAIN,QAAJ,CAAa,QAAb,CAAf;AACD;AACF,KANM,CAAP;AAOD;AA/FkB,CAArB;;kBAkGe,mBAASO,KAAT,CAAe,MAAf,EAAuBtD,UAAvB,C","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport {Schema} from 'mongoose';\n\nvar UserSchema = new Schema({\n  name: String,\n  email: {\n    type: String,\n    lowercase: true,\n    required: true\n  },\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  provider: String,\n  salt: String\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      'name': this.name,\n      'role': this.role\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      '_id': this._id,\n      'role': this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function(email) {\n    return email.length;\n  }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    return password.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value, respond) {\n    var self = this;\n\n    return this.constructor.findOne({ email: value }).exec()\n      .then(function(user) {\n        if (user) {\n          if (self.id === user.id) {\n            return respond(true);\n          }\n          return respond(false);\n        }\n        return respond(true);\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if (!this.isModified('password')) {\n      return next();\n    }\n\n    if (!validatePresenceOf(this.password)) {\n      return next(new Error('Invalid password'));\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if (saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if (encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if (!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (this.password === pwdGen) {\n        callback(null, true);\n      } else {\n        callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} byteSize Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(byteSize, callback) {\n    var defaultByteSize = 16;\n\n    if (typeof arguments[0] === 'function') {\n      callback = arguments[0];\n      byteSize = defaultByteSize;\n    } else if (typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    }\n\n    if (!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    if (!callback) {\n      return crypto.randomBytes(byteSize).toString('base64');\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if (!password || !this.salt) {\n      if (!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n\n    if (!callback) {\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                   .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, key.toString('base64'));\n      }\n    });\n  }\n};\n\nexport default mongoose.model('User', UserSchema);\n"]}