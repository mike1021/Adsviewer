{"version":3,"sources":["../../../../server/api/ad/ad.integration.js"],"names":["app","require","newad","describe","ads","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","ad","_id","afterEach","updatedad","put","delete"],"mappings":"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","file":"ad.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newad;\n\ndescribe('ad API:', function() {\n\n  describe('GET /api/ads', function() {\n    var ads;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/ads')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          ads = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      ads.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/ads', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/ads')\n        .send({\n          name: 'New ad',\n          info: 'This is the brand new ad!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newad = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created ad', function() {\n      newad.name.should.equal('New ad');\n      newad.info.should.equal('This is the brand new ad!!!');\n    });\n\n  });\n\n  describe('GET /api/ads/:id', function() {\n    var ad;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/ads/' + newad._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          ad = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      ad = {};\n    });\n\n    it('should respond with the requested ad', function() {\n      ad.name.should.equal('New ad');\n      ad.info.should.equal('This is the brand new ad!!!');\n    });\n\n  });\n\n  describe('PUT /api/ads/:id', function() {\n    var updatedad;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/ads/' + newad._id)\n        .send({\n          name: 'Updated ad',\n          info: 'This is the updated ad!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedad = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedad = {};\n    });\n\n    it('should respond with the updated ad', function() {\n      updatedad.name.should.equal('Updated ad');\n      updatedad.info.should.equal('This is the updated ad!!!');\n    });\n\n  });\n\n  describe('DELETE /api/ads/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/ads/' + newad._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when ad does not exist', function(done) {\n      request(app)\n        .delete('/api/ads/' + newad._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}