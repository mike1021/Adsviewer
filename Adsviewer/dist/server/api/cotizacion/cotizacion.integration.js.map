{"version":3,"sources":["../../../../server/api/cotizacion/cotizacion.integration.js"],"names":["app","require","newCotizacion","describe","cotizacions","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","cotizacion","_id","afterEach","updatedCotizacion","put","patchedCotizacion","patch","op","path","value","delete"],"mappings":"AAAA;;AAEA;;AAGA;;;;;;AADA,IAAIA,MAAMC,QAAQ,OAAR,CAAV;;;AAGA,IAAIC,aAAJ;;AAEAC,SAAS,iBAAT,EAA4B,YAAW;AACrCA,WAAS,sBAAT,EAAiC,YAAW;AAC1C,QAAIC,WAAJ;;AAEAC,eAAW,UAASC,IAAT,EAAe;AACxB,+BAAQN,GAAR,EACGO,GADH,CACO,kBADP,EAEGC,MAFH,CAEU,GAFV,EAGGA,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDN,sBAAcO,IAAIC,IAAlB;AACAN;AACD,OAVH;AAWD,KAZD;;AAcAO,OAAG,gCAAH,EAAqC,YAAW;AAC9CT,kBAAYU,MAAZ,CAAmBC,EAAnB,CAAsBC,UAAtB,CAAiCC,KAAjC;AACD,KAFD;AAGD,GApBD;;AAsBAd,WAAS,uBAAT,EAAkC,YAAW;AAC3CE,eAAW,UAASC,IAAT,EAAe;AACxB,+BAAQN,GAAR,EACGkB,IADH,CACQ,kBADR,EAEGC,IAFH,CAEQ;AACJC,cAAM,gBADF;AAEJC,cAAM;AAFF,OAFR,EAMGb,MANH,CAMU,GANV,EAOGA,MAPH,CAOU,cAPV,EAO0B,MAP1B,EAQGC,GARH,CAQO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDR,wBAAgBS,IAAIC,IAApB;AACAN;AACD,OAdH;AAeD,KAhBD;;AAkBAO,OAAG,kDAAH,EAAuD,YAAW;AAChEX,oBAAckB,IAAd,CAAmBN,MAAnB,CAA0BQ,KAA1B,CAAgC,gBAAhC;AACApB,oBAAcmB,IAAd,CAAmBP,MAAnB,CAA0BQ,KAA1B,CAAgC,qCAAhC;AACD,KAHD;AAID,GAvBD;;AAyBAnB,WAAS,0BAAT,EAAqC,YAAW;AAC9C,QAAIoB,UAAJ;;AAEAlB,eAAW,UAASC,IAAT,EAAe;AACxB,+BAAQN,GAAR,EACGO,GADH,uBAC2BL,cAAcsB,GADzC,EAEGhB,MAFH,CAEU,GAFV,EAGGA,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDa,qBAAaZ,IAAIC,IAAjB;AACAN;AACD,OAVH;AAWD,KAZD;;AAcAmB,cAAU,YAAW;AACnBF,mBAAa,EAAb;AACD,KAFD;;AAIAV,OAAG,8CAAH,EAAmD,YAAW;AAC5DU,iBAAWH,IAAX,CAAgBN,MAAhB,CAAuBQ,KAAvB,CAA6B,gBAA7B;AACAC,iBAAWF,IAAX,CAAgBP,MAAhB,CAAuBQ,KAAvB,CAA6B,qCAA7B;AACD,KAHD;AAID,GAzBD;;AA2BAnB,WAAS,0BAAT,EAAqC,YAAW;AAC9C,QAAIuB,iBAAJ;;AAEArB,eAAW,UAASC,IAAT,EAAe;AACxB,+BAAQN,GAAR,EACG2B,GADH,uBAC2BzB,cAAcsB,GADzC,EAEGL,IAFH,CAEQ;AACJC,cAAM,oBADF;AAEJC,cAAM;AAFF,OAFR,EAMGb,MANH,CAMU,GANV,EAOGA,MAPH,CAOU,cAPV,EAO0B,MAP1B,EAQGC,GARH,CAQO,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACtB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDgB,4BAAoBf,IAAIC,IAAxB;AACAN;AACD,OAdH;AAeD,KAhBD;;AAkBAmB,cAAU,YAAW;AACnBC,0BAAoB,EAApB;AACD,KAFD;;AAIAb,OAAG,4CAAH,EAAiD,YAAW;AAC1Da,wBAAkBN,IAAlB,CAAuBN,MAAvB,CAA8BQ,KAA9B,CAAoC,oBAApC;AACAI,wBAAkBL,IAAlB,CAAuBP,MAAvB,CAA8BQ,KAA9B,CAAoC,mCAApC;AACD,KAHD;;AAKAT,OAAG,gEAAH,EAAqE,UAASP,IAAT,EAAe;AAClF,+BAAQN,GAAR,EACGO,GADH,uBAC2BL,cAAcsB,GADzC,EAEGhB,MAFH,CAEU,GAFV,EAGGA,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACD,YAAIa,aAAaZ,IAAIC,IAArB;;AAEAW,mBAAWH,IAAX,CAAgBN,MAAhB,CAAuBQ,KAAvB,CAA6B,oBAA7B;AACAC,mBAAWF,IAAX,CAAgBP,MAAhB,CAAuBQ,KAAvB,CAA6B,mCAA7B;;AAEAhB;AACD,OAdH;AAeD,KAhBD;AAiBD,GA/CD;;AAiDAH,WAAS,4BAAT,EAAuC,YAAW;AAChD,QAAIyB,iBAAJ;;AAEAvB,eAAW,UAASC,IAAT,EAAe;AACxB,+BAAQN,GAAR,EACG6B,KADH,uBAC6B3B,cAAcsB,GAD3C,EAEGL,IAFH,CAEQ,CACJ,EAAEW,IAAI,SAAN,EAAiBC,MAAM,OAAvB,EAAgCC,OAAO,oBAAvC,EADI,EAEJ,EAAEF,IAAI,SAAN,EAAiBC,MAAM,OAAvB,EAAgCC,OAAO,mCAAvC,EAFI,CAFR,EAMGxB,MANH,CAMU,GANV,EAOGA,MAPH,CAOU,cAPV,EAO0B,MAP1B,EAQGC,GARH,CAQO,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACtB,YAAGD,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDkB,4BAAoBjB,IAAIC,IAAxB;AACAN;AACD,OAdH;AAeD,KAhBD;;AAkBAmB,cAAU,YAAW;AACnBG,0BAAoB,EAApB;AACD,KAFD;;AAIAf,OAAG,4CAAH,EAAiD,YAAW;AAC1De,wBAAkBR,IAAlB,CAAuBN,MAAvB,CAA8BQ,KAA9B,CAAoC,oBAApC;AACAM,wBAAkBP,IAAlB,CAAuBP,MAAvB,CAA8BQ,KAA9B,CAAoC,mCAApC;AACD,KAHD;AAID,GA7BD;;AA+BAnB,WAAS,6BAAT,EAAwC,YAAW;AACjDU,OAAG,+CAAH,EAAoD,UAASP,IAAT,EAAe;AACjE,+BAAQN,GAAR,EACGiC,MADH,uBAC8B/B,cAAcsB,GAD5C,EAEGhB,MAFH,CAEU,GAFV,EAGGC,GAHH,CAGO,eAAO;AACV,YAAGC,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDJ;AACD,OARH;AASD,KAVD;;AAYAO,OAAG,wDAAH,EAA6D,UAASP,IAAT,EAAe;AAC1E,+BAAQN,GAAR,EACGiC,MADH,uBAC8B/B,cAAcsB,GAD5C,EAEGhB,MAFH,CAEU,GAFV,EAGGC,GAHH,CAGO,eAAO;AACV,YAAGC,GAAH,EAAQ;AACN,iBAAOJ,KAAKI,GAAL,CAAP;AACD;AACDJ;AACD,OARH;AASD,KAVD;AAWD,GAxBD;AAyBD,CApLD","file":"cotizacion.integration.js","sourcesContent":["'use strict';\n\n/* globals describe, expect, it, beforeEach, afterEach */\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newCotizacion;\n\ndescribe('Cotizacion API:', function() {\n  describe('GET /api/cotizacions', function() {\n    var cotizacions;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/cotizacions')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          cotizacions = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      cotizacions.should.be.instanceOf(Array);\n    });\n  });\n\n  describe('POST /api/cotizacions', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/cotizacions')\n        .send({\n          name: 'New Cotizacion',\n          info: 'This is the brand new cotizacion!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          newCotizacion = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created cotizacion', function() {\n      newCotizacion.name.should.equal('New Cotizacion');\n      newCotizacion.info.should.equal('This is the brand new cotizacion!!!');\n    });\n  });\n\n  describe('GET /api/cotizacions/:id', function() {\n    var cotizacion;\n\n    beforeEach(function(done) {\n      request(app)\n        .get(`/api/cotizacions/${newCotizacion._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          cotizacion = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      cotizacion = {};\n    });\n\n    it('should respond with the requested cotizacion', function() {\n      cotizacion.name.should.equal('New Cotizacion');\n      cotizacion.info.should.equal('This is the brand new cotizacion!!!');\n    });\n  });\n\n  describe('PUT /api/cotizacions/:id', function() {\n    var updatedCotizacion;\n\n    beforeEach(function(done) {\n      request(app)\n        .put(`/api/cotizacions/${newCotizacion._id}`)\n        .send({\n          name: 'Updated Cotizacion',\n          info: 'This is the updated cotizacion!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          updatedCotizacion = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedCotizacion = {};\n    });\n\n    it('should respond with the updated cotizacion', function() {\n      updatedCotizacion.name.should.equal('Updated Cotizacion');\n      updatedCotizacion.info.should.equal('This is the updated cotizacion!!!');\n    });\n\n    it('should respond with the updated cotizacion on a subsequent GET', function(done) {\n      request(app)\n        .get(`/api/cotizacions/${newCotizacion._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          let cotizacion = res.body;\n\n          cotizacion.name.should.equal('Updated Cotizacion');\n          cotizacion.info.should.equal('This is the updated cotizacion!!!');\n\n          done();\n        });\n    });\n  });\n\n  describe('PATCH /api/cotizacions/:id', function() {\n    var patchedCotizacion;\n\n    beforeEach(function(done) {\n      request(app)\n        .patch(`/api/cotizacions/${newCotizacion._id}`)\n        .send([\n          { op: 'replace', path: '/name', value: 'Patched Cotizacion' },\n          { op: 'replace', path: '/info', value: 'This is the patched cotizacion!!!' }\n        ])\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          patchedCotizacion = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      patchedCotizacion = {};\n    });\n\n    it('should respond with the patched cotizacion', function() {\n      patchedCotizacion.name.should.equal('Patched Cotizacion');\n      patchedCotizacion.info.should.equal('This is the patched cotizacion!!!');\n    });\n  });\n\n  describe('DELETE /api/cotizacions/:id', function() {\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete(`/api/cotizacions/${newCotizacion._id}`)\n        .expect(204)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when cotizacion does not exist', function(done) {\n      request(app)\n        .delete(`/api/cotizacions/${newCotizacion._id}`)\n        .expect(404)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n  });\n});\n"]}