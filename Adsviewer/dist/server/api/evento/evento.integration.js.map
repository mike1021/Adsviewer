{"version":3,"sources":["../../../../server/api/evento/evento.integration.js"],"names":["app","require","newEvento","describe","eventos","beforeEach","done","get","expect","end","err","res","body","it","should","be","instanceOf","Array","post","send","name","info","equal","evento","_id","afterEach","updatedEvento","put","patchedEvento","patch","op","path","value","delete"],"mappings":"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","file":"evento.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newEvento;\n\ndescribe('Evento API:', function() {\n  describe('GET /api/eventos', function() {\n    var eventos;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/eventos')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          eventos = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      eventos.should.be.instanceOf(Array);\n    });\n  });\n\n  describe('POST /api/eventos', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/eventos')\n        .send({\n          name: 'New Evento',\n          info: 'This is the brand new evento!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          newEvento = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created evento', function() {\n      newEvento.name.should.equal('New Evento');\n      newEvento.info.should.equal('This is the brand new evento!!!');\n    });\n  });\n\n  describe('GET /api/eventos/:id', function() {\n    var evento;\n\n    beforeEach(function(done) {\n      request(app)\n        .get(`/api/eventos/${newEvento._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          evento = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      evento = {};\n    });\n\n    it('should respond with the requested evento', function() {\n      evento.name.should.equal('New Evento');\n      evento.info.should.equal('This is the brand new evento!!!');\n    });\n  });\n\n  describe('PUT /api/eventos/:id', function() {\n    var updatedEvento;\n\n    beforeEach(function(done) {\n      request(app)\n        .put(`/api/eventos/${newEvento._id}`)\n        .send({\n          name: 'Updated Evento',\n          info: 'This is the updated evento!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          updatedEvento = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedEvento = {};\n    });\n\n    it('should respond with the original evento', function() {\n      updatedEvento.name.should.equal('New Evento');\n      updatedEvento.info.should.equal('This is the brand new evento!!!');\n    });\n\n    it('should respond with the updated evento on a subsequent GET', function(done) {\n      request(app)\n        .get(`/api/eventos/${newEvento._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          let evento = res.body;\n\n          evento.name.should.equal('Updated Evento');\n          evento.info.should.equal('This is the updated evento!!!');\n\n          done();\n        });\n    });\n  });\n\n  describe('PATCH /api/eventos/:id', function() {\n    var patchedEvento;\n\n    beforeEach(function(done) {\n      request(app)\n        .patch(`/api/eventos/${newEvento._id}`)\n        .send([\n          { op: 'replace', path: '/name', value: 'Patched Evento' },\n          { op: 'replace', path: '/info', value: 'This is the patched evento!!!' }\n        ])\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          patchedEvento = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      patchedEvento = {};\n    });\n\n    it('should respond with the patched evento', function() {\n      patchedEvento.name.should.equal('Patched Evento');\n      patchedEvento.info.should.equal('This is the patched evento!!!');\n    });\n  });\n\n  describe('DELETE /api/eventos/:id', function() {\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete(`/api/eventos/${newEvento._id}`)\n        .expect(204)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when evento does not exist', function(done) {\n      request(app)\n        .delete(`/api/eventos/${newEvento._id}`)\n        .expect(404)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n  });\n});\n"]}