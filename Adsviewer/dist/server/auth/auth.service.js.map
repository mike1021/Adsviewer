{"version":3,"sources":["../../../server/auth/auth.service.js"],"names":["passport","require","config","jwt","expressJwt","compose","User","validateJwt","secret","secrets","session","isAuthenticated","use","req","res","next","query","hasOwnProperty","headers","authorization","access_token","findById","user","_id","exec","then","status","end","catch","err","hasRole","roleRequired","Error","meetsRequirements","userRoles","indexOf","role","send","signToken","id","sign","expiresIn","setTokenCookie","token","cookie","redirect","exports"],"mappings":"AAAA;;AAEA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,SAASD,QAAQ,uBAAR,CAAb;AACA,IAAIE,MAAMF,QAAQ,cAAR,CAAV;AACA,IAAIG,aAAaH,QAAQ,aAAR,CAAjB;AACA,IAAII,UAAUJ,QAAQ,uBAAR,CAAd;AACA,IAAIK,OAAOL,QAAQ,wBAAR,CAAX;;AAEA,IAAIM,cAAcH,WAAW;AAC3BI,UAAQN,OAAOO,OAAP,CAAeC;AADI,CAAX,CAAlB;;AAIA;;;;AAIA,SAASC,eAAT,GAA4B;AAC1B,SAAON;AACL;AADK,GAEJO,GAFI,CAEA,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5B;AACA,QAAIF,IAAIG,KAAJ,IAAaH,IAAIG,KAAJ,CAAUC,cAAV,CAAyB,cAAzB,CAAjB,EAA2D;AACzDJ,UAAIK,OAAJ,CAAYC,aAAZ,GAA4B,YAAYN,IAAIG,KAAJ,CAAUI,YAAlD;AACD;AACDb,gBAAYM,GAAZ,EAAiBC,GAAjB,EAAsBC,IAAtB;AACD,GARI;AASL;AATK,GAUJH,GAVI,CAUA,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5BT,SAAKe,QAAL,CAAcR,IAAIS,IAAJ,CAASC,GAAvB,EAA4BC,IAA5B,GACGC,IADH,CACQ,gBAAQ;AACZ,UAAI,CAACH,IAAL,EAAW;AACT,eAAOR,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;AACDd,UAAIS,IAAJ,GAAWA,IAAX;AACAP;AACD,KAPH,EAQGa,KARH,CAQS;AAAA,aAAOb,KAAKc,GAAL,CAAP;AAAA,KART;AASD,GApBI,CAAP;AAqBD;;AAED;;;AAGC,SAASC,OAAT,CAAiBC,YAAjB,EAA+B;AAC9B,MAAI,CAACA,YAAL,EAAmB;AACjB,UAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAO3B,UACJO,GADI,CACAD,iBADA,EAEJC,GAFI,CAEA,SAASqB,iBAAT,CAA2BpB,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAC9C,QAAIb,OAAOgC,SAAP,CAAiBC,OAAjB,CAAyBtB,IAAIS,IAAJ,CAASc,IAAlC,KACAlC,OAAOgC,SAAP,CAAiBC,OAAjB,CAAyBJ,YAAzB,CADJ,EAC4C;AAC1ChB;AACD,KAHD,MAGO;AACLD,UAAIY,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,WAArB;AACD;AACF,GATI,CAAP;AAUD;;AAED;;;AAGA,SAASC,SAAT,CAAmBC,EAAnB,EAAuBH,IAAvB,EAA6B;AAC3B,SAAOjC,IAAIqC,IAAJ,CAAS,EAAEjB,KAAKgB,EAAP,EAAWH,MAAMA,IAAjB,EAAT,EAAkClC,OAAOO,OAAP,CAAeC,OAAjD,EAA0D;AAC/D+B,eAAW,KAAK,EAAL,GAAU;AAD0C,GAA1D,CAAP;AAGD;;AAED;;;AAGA,SAASC,cAAT,CAAwB7B,GAAxB,EAA6BC,GAA7B,EAAkC;AAChC,MAAI,CAACD,IAAIS,IAAT,EAAe;AACb,WAAOR,IAAIY,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,wDAArB,CAAP;AACD;AACD,MAAIM,QAAQL,UAAUzB,IAAIS,IAAJ,CAASC,GAAnB,EAAwBV,IAAIS,IAAJ,CAASc,IAAjC,CAAZ;AACAtB,MAAI8B,MAAJ,CAAW,OAAX,EAAoBD,KAApB;AACA7B,MAAI+B,QAAJ,CAAa,GAAb;AACD;;AAEDC,QAAQnC,eAAR,GAA0BA,eAA1B;AACAmC,QAAQhB,OAAR,GAAkBA,OAAlB;AACAgB,QAAQR,SAAR,GAAoBA,SAApB;AACAQ,QAAQJ,cAAR,GAAyBA,cAAzB","file":"auth.service.js","sourcesContent":["'use strict';\n\nvar passport = require('passport');\nvar config = require('../config/environment');\nvar jwt = require('jsonwebtoken');\nvar expressJwt = require('express-jwt');\nvar compose = require('composable-middleware');\nvar User = require('../api/user/user.model');\n\nvar validateJwt = expressJwt({\n  secret: config.secrets.session\n});\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nfunction isAuthenticated () {\n  return compose()\n    // Validate jwt\n    .use(function(req, res, next) {\n      // allow access_token to be passed through query parameter as well\n      if (req.query && req.query.hasOwnProperty('access_token')) {\n        req.headers.authorization = 'Bearer ' + req.query.access_token;\n      }\n      validateJwt(req, res, next);\n    })\n    // Attach user to request\n    .use(function(req, res, next) {\n      User.findById(req.user._id).exec()\n        .then(user => {\n          if (!user) {\n            return res.status(401).end();\n          }\n          req.user = user;\n          next();\n        })\n        .catch(err => next(err));\n    });\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\n function hasRole(roleRequired) {\n  if (!roleRequired) {\n    throw new Error('Required role needs to be set');\n  }\n\n  return compose()\n    .use(isAuthenticated())\n    .use(function meetsRequirements(req, res, next) {\n      if (config.userRoles.indexOf(req.user.role) >=\n          config.userRoles.indexOf(roleRequired)) {\n        next();\n      } else {\n        res.status(403).send('Forbidden');\n      }\n    });\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nfunction signToken(id, role) {\n  return jwt.sign({ _id: id, role: role }, config.secrets.session, {\n    expiresIn: 60 * 60 * 5\n  });\n}\n\n/**\n * Set token cookie directly for oAuth strategies\n */\nfunction setTokenCookie(req, res) {\n  if (!req.user) {\n    return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\n  }\n  var token = signToken(req.user._id, req.user.role);\n  res.cookie('token', token);\n  res.redirect('/');\n}\n\nexports.isAuthenticated = isAuthenticated;\nexports.hasRole = hasRole;\nexports.signToken = signToken;\nexports.setTokenCookie = setTokenCookie;\n"]}